package ie.turfclub.inspections.model;

// default package
// Generated 11-Feb-2015 16:52:50 by Hibernate Tools 3.4.0.CR1

import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;






import org.springframework.format.annotation.DateTimeFormat;

/**
 * InspectionsInspections generated by hbm2java
 */
@Entity
@Table(name = "inspections_inspections", catalog = "inspections")
public class InspectionsInspections implements java.io.Serializable, Comparator<InspectionsInspections> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer inspectionId;
	private InspectionsTrainers inspectionTrainerId;
	private InspectionsHandlers inspectionHandlerId;
	private InspectionsUnregistered inspectionsUnregisteredId;
	private InspectionsPerson inspectionsPersonId;
	private String inspectionsAddress1;
	private String inspectionsAddress2;
	private String inspectionsAddress3;
	private String inspectionsAddress4;
	@DateTimeFormat (pattern="dd/MM/YYYY")
	private Date inspectionDate;
	private InspectionsCategories inspectionCategoriesId;
	private InspectionsSubCategories inspectionSubCategoriesId;
	private InspectionsStatus inspectionStatusId;
	private Set<InspectionsOfficials> inspectionsOfficials = new HashSet<InspectionsOfficials>();
	private String inspectionDeptOfficials;
	private boolean canEdit = false;
	private Integer inspectionUserId;
	private String inspectionsComments;
	private boolean inspectionDeleted;
	
	public InspectionsInspections() {
	
		
	}


	
	

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "inspection_id", unique = true, nullable = false)
	public Integer getInspectionId() {
		return this.inspectionId;
	}

	public void setInspectionId(Integer inspectionId) {
		this.inspectionId = inspectionId;
	}

	






	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER)
	@JoinColumn(name = "inspection_trainer_id", nullable = true)
	public InspectionsTrainers getInspectionTrainerId() {
		
		
		
		return this.inspectionTrainerId;
	}

	public void setInspectionTrainerId(InspectionsTrainers inspectionTrainerId) {
		this.inspectionTrainerId = inspectionTrainerId;
		if(this.inspectionTrainerId != null){
		this.inspectionsPersonId = new InspectionsPerson();
		this.inspectionsPersonId.setName(this.inspectionTrainerId.getTrainerSurname() + " " + this.inspectionTrainerId.getTrainerFirstName() + " (Trainer)");
		this.inspectionsPersonId.setId("T" + this.inspectionTrainerId.getTrainerId());
		System.out.println(this.inspectionsPersonId.getName());
		}
	}
	
	
	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER)
	@JoinColumn(name = "inspection_handler_id", nullable = true)
	public InspectionsHandlers getInspectionHandlerId() {
		return this.inspectionHandlerId;
	}

	public void setInspectionHandlerId(InspectionsHandlers inspectionHandlerId) {
		
		this.inspectionHandlerId = inspectionHandlerId;
		if(this.inspectionHandlerId != null){
			this.inspectionsPersonId = new InspectionsPerson();
			this.inspectionsPersonId.setName(this.inspectionHandlerId.getOwnerSurname() + " " + this.inspectionHandlerId.getOwnerFirstName() + " (Handler)");
			this.inspectionsPersonId.setId("H" + this.inspectionHandlerId.getOwnerId());
		}
		
	}

	
	
	
	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER)
	@JoinColumn(name = "inspection_unreg_id", nullable = true)
	public InspectionsUnregistered getInspectionsUnregisteredId() {
		return inspectionsUnregisteredId;
	}





	public void setInspectionsUnregisteredId(
			InspectionsUnregistered inspectionsUnregisteredId) {
		this.inspectionsUnregisteredId = inspectionsUnregisteredId;
		if(this.inspectionsUnregisteredId != null){
		this.inspectionsPersonId = new InspectionsPerson();
		this.inspectionsPersonId.setName(this.inspectionsUnregisteredId.getUnregSurname() + " " + this.inspectionsUnregisteredId.getUnregFirstName() + " (Unregistered)");
		this.inspectionsPersonId.setId("U" + this.inspectionsUnregisteredId.getUnregId());
		}
	}




	@Column(name = "inspection_address1", nullable = true)
	public String getInspectionsAddress1() {
		return inspectionsAddress1;
	}





	public void setInspectionsAddress1(String inspectionsAddress1) {
		this.inspectionsAddress1 = inspectionsAddress1;
	}




	@Column(name = "inspection_address2", nullable = true)
	public String getInspectionsAddress2() {
		return inspectionsAddress2;
	}





	public void setInspectionsAddress2(String inspectionsAddress2) {
		this.inspectionsAddress2 = inspectionsAddress2;
	}




	@Column(name = "inspection_address3", nullable = true)
	public String getInspectionsAddress3() {
		return inspectionsAddress3;
	}





	public void setInspectionsAddress3(String inspectionsAddress3) {
		this.inspectionsAddress3 = inspectionsAddress3;
	}




	@Column(name = "inspection_address4", nullable = true)
	public String getInspectionsAddress4() {
		return inspectionsAddress4;
	}





	public void setInspectionsAddress4(String inspectionsAddress4) {
		this.inspectionsAddress4 = inspectionsAddress4;
	}





	@Temporal(TemporalType.DATE)
	@Column(name = "inspection_date", nullable = false, length = 10)
	public Date getInspectionDate() {
		return this.inspectionDate;
	}

	public void setInspectionDate(Date inspectionDate) {
		
		this.inspectionDate = inspectionDate;
	}

	
	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER)
	@JoinColumn(name = "inspection_category_id", nullable = true)
	public InspectionsCategories getInspectionCategoriesId() {
		return inspectionCategoriesId;
	}


	
	
	public void setInspectionCategoriesId(
			InspectionsCategories inspectionCategoriesId) {
		this.inspectionCategoriesId = inspectionCategoriesId;
	}

	public void setInspectionSubCategoriesId(
			InspectionsSubCategories inspectionSubCategoriesId) {
		this.inspectionSubCategoriesId = inspectionSubCategoriesId;
	}

	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER)
	@JoinColumn(name = "inspection_sub_category_id", nullable = true)
	public InspectionsSubCategories getInspectionSubCategoriesId() {
		return inspectionSubCategoriesId;
	}




	

	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER)
	@JoinColumn(name = "inspection_status_id", nullable = true)
	public InspectionsStatus getInspectionStatusId() {
		return this.inspectionStatusId;
	}

	




	public void setInspectionStatusId(InspectionsStatus inspectionStatusId) {
		this.inspectionStatusId = inspectionStatusId;
	}

	


	@Transient
	public InspectionsPerson getInspectionsPersonId() {
		return inspectionsPersonId;
	}





	public void setInspectionsPersonId(InspectionsPerson inspectionsPersonId) {
		this.inspectionsPersonId = inspectionsPersonId;
	}




	@Column(name = "inspections_comments")
	public String getInspectionsComments() {
		return inspectionsComments;
	}





	public void setInspectionsComments(String inspectionsComments) {
		this.inspectionsComments = inspectionsComments;
	}





	@Transient
	public boolean isCanEdit() {
		return canEdit;
	}





	public void setCanEdit(boolean canEdit) {
		this.canEdit = canEdit;
	}





	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@ManyToMany(fetch=FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinTable(name="inspections_officials_on_duty", catalog="inspections", joinColumns={
			@JoinColumn(name="on_duty_inspection_id", nullable=false, updatable=false)},
			inverseJoinColumns={@JoinColumn(name="on_duty_official_id", nullable=false, updatable=false)})
	public Set<InspectionsOfficials> getInspectionsOfficials() {
		return inspectionsOfficials;
	}





	public void setInspectionsOfficials(Set<InspectionsOfficials> inspectionsOfficials) {
		this.inspectionsOfficials = inspectionsOfficials;
	}





	@Column(name = "inspection_dept_officials", nullable = true)
public String getInspectionDeptOfficials() {
		return inspectionDeptOfficials;
	}





	public void setInspectionDeptOfficials(String inspectionDeptOfficials) {
		this.inspectionDeptOfficials = inspectionDeptOfficials;
	}




@Column(name = "inspection_user_id", nullable = true)
public Integer getInspectionUserId() {
		return inspectionUserId;
	}




@Column(name = "inspection_deleted", nullable = false)
	public boolean isInspectionDeleted() {
	return inspectionDeleted;
}





public void setInspectionDeleted(boolean inspectionDeleted) {
	this.inspectionDeleted = inspectionDeleted;
}





	public void setInspectionUserId(Integer inspectionUserId) {
		this.inspectionUserId = inspectionUserId;
	}





@Override
public int compare(InspectionsInspections o1, InspectionsInspections o2) {
	String name = "";
	String nameToCompare = "";
	if(o1.inspectionHandlerId != null){
		name = o1.inspectionHandlerId.getOwnerSurname() + " " + o1.inspectionHandlerId.getOwnerFirstName();
	}
	if(o1.inspectionTrainerId != null){
		name = o1.inspectionTrainerId.getTrainerSurname() + " " + o1.inspectionTrainerId.getTrainerFirstName();
	}
	if(o2.inspectionHandlerId != null){
		nameToCompare = o2.inspectionHandlerId.getOwnerSurname() + " " + o2.inspectionHandlerId.getOwnerFirstName();
	}
	if(o2.inspectionTrainerId != null){
		nameToCompare = o2.inspectionTrainerId.getTrainerSurname() + " " + o2.inspectionTrainerId.getTrainerFirstName();
	}
	System.out.println("Compare:" + name + " - " + nameToCompare + " - " + name.compareTo(nameToCompare));
	return name.compareTo(nameToCompare);
}


	
	
	@Override
	public String toString(){
		String name = "";

		if(this.inspectionHandlerId != null){
			name = inspectionHandlerId.getOwnerSurname() + " " + inspectionHandlerId.getOwnerFirstName();
		}
		if(this.inspectionTrainerId != null){
			name = inspectionTrainerId.getTrainerSurname() + " " + this.getInspectionTrainerId().getTrainerFirstName();
		}
		return name;
	}



	


	
	
	
}
