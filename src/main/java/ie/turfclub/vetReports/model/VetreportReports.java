package ie.turfclub.vetReports.model;

// default package
// Generated 20-Feb-2015 09:56:42 by Hibernate Tools 3.4.0.CR1



import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Comparator;
import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * VetreportReports generated by hbm2java
 */
@Entity
@Table(name = "vetreport_reports", catalog = "vetreports")
public class VetreportReports implements java.io.Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer reportId;
	private String reportContent;
	private VetreportRacecard reportRacecardId;
	private VetReportRandomStableInspectionDetail reportRandomId;
	private VetreportNonrunnerDetail reportNonRunnerId;
	private String reportMisc;
	private String reportHorsePlaced;
	private String reportType;
	private String htmlDate;
	private SimpleDateFormat dformat = new SimpleDateFormat("dd/MM/yyyy");
	
	static Logger logger = LoggerFactory.getLogger(VetreportReports.class);

	public VetreportReports() {
		this.reportRacecardId = new VetreportRacecard();
		this.reportRandomId = new VetReportRandomStableInspectionDetail();
		this.reportNonRunnerId = new VetreportNonrunnerDetail();
	}

	public VetreportReports(String reportContent, 
			String reportType) {
		this.reportContent = reportContent;
		this.reportType = reportType;
	}

	public VetreportReports(Integer reportId, String reportContent, VetreportRacecard reportRacecardId,
			VetReportRandomStableInspectionDetail reportRandomId, VetreportNonrunnerDetail reportNonRunnerId,
			String reportMisc, String reportHorsePlaced,
			String reportType) {
		this.reportId = reportId;
		this.reportContent = reportContent;
		this.reportRacecardId = reportRacecardId;
		this.reportRandomId = reportRandomId;
		this.reportNonRunnerId = reportNonRunnerId;
		this.reportMisc = reportMisc;
		this.reportHorsePlaced = reportHorsePlaced;
		this.reportType = reportType;
	
	}
	
	public VetreportReports( String reportContent, VetreportRacecard reportRacecardId,
			VetReportRandomStableInspectionDetail reportRandomId, VetreportNonrunnerDetail reportNonRunnerId,
			String reportMisc, String reportHorsePlaced,
			String reportType) {

		this.reportContent = reportContent;
		this.reportRacecardId = reportRacecardId;
		this.reportRandomId = reportRandomId;
		this.reportNonRunnerId = reportNonRunnerId;
		this.reportMisc = reportMisc;
		this.reportHorsePlaced = reportHorsePlaced;
		this.reportType = reportType;
	
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "report_id", unique = true, nullable = false)
	public Integer getReportId() {
		return this.reportId;
	}

	public void setReportId(Integer reportId) {
		this.reportId = reportId;
	}

	@Column(name = "report_content", nullable = false, length = 65535)
	public String getReportContent() {
		return this.reportContent;
	}

	public void setReportContent(String reportContent) {
		this.reportContent = reportContent;
	}

	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@JoinColumn(name = "report_racecard_id" , nullable = true)
	public VetreportRacecard getReportRacecardId() {
		return this.reportRacecardId;
	}

	public void setReportRacecardId(VetreportRacecard reportRacecardId) {
		this.reportRacecardId = reportRacecardId;
	}

	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@JoinColumn(name = "report_random_id" , nullable = true)
	public VetReportRandomStableInspectionDetail getReportRandomId() {
		return this.reportRandomId;
	}

	public void setReportRandomId(VetReportRandomStableInspectionDetail reportRandomId) {
		this.reportRandomId = reportRandomId;
	}

	@Basic(optional=true)
	@NotFound(action=NotFoundAction.IGNORE)  
	@OneToOne( optional = true, fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@JoinColumn(name = "report_non_runner_id" , nullable = true)
	public VetreportNonrunnerDetail getReportNonRunnerId() {
		return this.reportNonRunnerId;
	}

	public void setReportNonRunnerId(VetreportNonrunnerDetail reportNonRunnerId) {
		this.reportNonRunnerId = reportNonRunnerId;
	}

	@Column(name = "report_misc", length = 65535)
	public String getReportMisc() {
		return this.reportMisc;
	}

	public void setReportMisc(String reportMisc) {
		this.reportMisc = reportMisc;
	}

	@Column(name = "report_horse_placed", length = 20)
	public String getReportHorsePlaced() {
		return this.reportHorsePlaced;
	}

	public void setReportHorsePlaced(String reportHorsePlaced) {
		this.reportHorsePlaced = reportHorsePlaced;
	}


	@Column(name = "report_type", nullable = false, length = 22)
	public String getReportType() {
		return this.reportType;
	}

	public void setReportType(String reportType) {
		this.reportType = reportType;
	}

	@Transient
	public Date getHtmlDateFormatted(){
		Date date = null;
		try {
			date = dformat.parse(htmlDate);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return date;
	}

	
	@Transient
	public String getHtmlDate() {

	    if(this.reportRacecardId != null && this.reportRacecardId.getRowId() != 0){
	    	this.htmlDate = dformat.format(reportRacecardId.getDateRan());
	    }
	    else if(this.reportRandomId != null && this.reportRandomId.getRandomId() != 0){
	    	this.htmlDate = dformat.format(reportRandomId.getRandomInpsectionDate());
	    }
	    else{

	        	htmlDate= "";
	        

	    	
	    }
		
		return htmlDate;
	}

	public void setHtmlDate(String htmlDate) {
		if(this.reportRacecardId != null){
	    	try {
				reportRacecardId.setDateRan(dformat.parse(htmlDate));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    }
	    else if(this.reportRandomId != null){
	    	try {
				reportRandomId.setRandomInpsectionDate(dformat.parse(htmlDate));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    }
		
		this.htmlDate = htmlDate;
	}



	
	public static class dateComparator implements Comparator<VetreportReports> {
		  public int compare(VetreportReports report1, VetreportReports report2) {
		        Date date1 = null;
		        Date date2 = null;
		        
		        if(report1.getReportRacecardId() != null){
		        	date1 = report1.getReportRacecardId().getDateRan();
		        }
		        else if(report1.getReportRandomId() != null){
		        	date1 = report1.getReportRandomId().getRandomInpsectionDate();
		        }
		        if(report2.getReportRacecardId() != null){
		        	date2 = report2.getReportRacecardId().getDateRan();
		        }
		        else if(report2.getReportRandomId() != null){
		        	date2 = report2.getReportRandomId().getRandomInpsectionDate();
		        }
		        return date1.compareTo(date2);
		        
		  }
	}
	

	
	public static class trainerComparator implements Comparator<VetreportReports> {
		  public int compare(VetreportReports report1, VetreportReports report2) {
		        String trainer1 = "";
		        String trainer2 = "";
		        
		        if(report1.getReportRacecardId() != null){
		        	trainer1 = report1.getReportRacecardId().getTrainerName();
		        }
		        else if(report1.getReportRandomId() != null){
		        		trainer1 = report1.getReportRandomId().getRandomTrainerId().getTrainerName();
		        }
		        if(report2.getReportRacecardId() != null){
		        	trainer2 = report2.getReportRacecardId().getTrainerName();
		        }
		        else if(report2.getReportRandomId() != null){
		        		trainer2 = report2.getReportRandomId().getRandomTrainerId().getTrainerName();
		        }
		        String[] trainerSplit1 = trainer1.split(" ");
		        trainer1 = trainerSplit1[trainerSplit1.length-1];
		        String[] trainerSplit2 = trainer2.split(" ");
		        trainer2 = trainerSplit2[trainerSplit2.length-1];
		        return trainer1.compareTo(trainer2);
		        
		  }
	}


	
	
}
